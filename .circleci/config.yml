# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1
# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   say-hello:
#     # Specify the execution environment.
#     # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
#     docker:
#       - image: cimg/base:stable
#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#     steps:
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World!"
# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - say-hello


# version: 2
# jobs: # we now have TWO jobs, so that a workflow can coordinate them!
#   one: # This is our first job.
#     docker: # it uses the docker executor
#       - image: circleci/ruby:2.4.1 # specifically, a docker image with ruby 2.4.1
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     # Steps are a list of commands to run inside the docker container above.
#     steps:
#       - checkout # this pulls code down from GitHub
#       - run: echo "A first hello" # This prints "A first hello" to stdout.
#       - run: sleep 25 # a command telling the job to "sleep" for 25 seconds.
#   two: # This is our second job.
#     docker: # it runs inside a docker image, the same as above.
#       - image: circleci/ruby:2.4.1
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     steps:
#       - checkout
#       - run: echo "A more familiar hi" # We run a similar echo command to above.
#       - run: sleep 15 # and then sleep for 15 seconds.
# # Under the workflows: map, we can coordinate our two jobs, defined above.
# workflows:
#   version: 2
#   one_and_two: # this is the name of our workflow
#     jobs: # and here we list the jobs we are going to run.
#       - one
#       - two

version: 2
jobs:
  one:
    docker:
      - image: circleci/ruby:2.4.1
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - run: echo "A first hello"
      - run: mkdir -p my_workspace
      - run: echo "Trying out workspaces" > my_workspace/echo-output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: my_workspace
          # Must be relative path from root
          paths:
            - echo-output
  two:
    docker:
      - image: circleci/ruby:2.4.1
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - run: echo "A more familiar hi"
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: my_workspace

      - run: |
          if [[ $(cat my_workspace/echo-output) == "Trying out workspaces" ]]; then
            echo "It worked!";
          else
            echo "Nope!"; exit 1
          fi
workflows:
  version: 2
  one_and_two:
    jobs:
      - one
      - two:
          requires:
            - one